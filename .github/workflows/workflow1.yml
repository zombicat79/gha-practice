name: Workflow1
on: workflow_dispatch
jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: download repo
        uses: actions/checkout@v3
      - name: install node
        uses: actions/setup-node@v4
        with:
          node-version: "18.18.0"
      - name: cache dependencies
        # Step caching allows us to store some lengthy steps in a general GitHub cache and reuse them...
        # ...across different jobs and workflows
        # The most common use case is to cache dependencies so they don't need to be reinstalled every time
        uses: actions/cache@v3 # Standard GitHub Action from the marketplace
        with:
          path: ~/.npm # The path holding the files that are going to be cached
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
          # The key is something the caching system uses to know when to use cached data or discard it
          # The 'hashFile' GitHub method creates a hash identifier for the provided file, which varies...
          # ...every time that file undergoes modification. If hashes do not correspond, the cache...
          # ...gets discarded
      - name: install dependencies
        run: npm install
      - name: run linter
        run: npm run lint
  testing:
    needs: linting
    runs-on: ubuntu-latest
    steps:
      - name: download repo
        uses: actions/checkout@v3
      - name: install node
        uses: actions/setup-node@v4
        with:
          node-version: "18.18.0"
      # Cache has been initiated during the first job, but needs to be repeated as a step on every...
      # ...job thereafter, so the current job can decide whether to retrieve the cached data or proceed anew
      - name: cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: install dependencies
        run: npm install
      - name: run tests
        run: npm run test
  building:
    needs: testing
    runs-on: ubuntu-latest
    outputs:
    # Here follows a list with all the outputs produced by the job (if applicable)
      random-number: ${{ steps.publish.outputs.random-number }}
      # Above there's an output identifyer, so the output can later be used in other jobs...
      # ...it can take any name
      # Its value is the special syntax that grants access to environment variables, accessing the relevant...
      # ...step by its ID and then its 'outputs' property, followed by the output we produced in the step
    steps:
      - name: download repo
        uses: actions/checkout@v3
      - name: install node
        uses: actions/setup-node@v4
        with:
          node-version: "18.18.0"
      - name: install dependencies
        run: npm install
      - name: make build
        run: npm run build
      # Jobs can produce outputs, which are derived values that can later be used in other jobs
      - name: Publish random value
        # id helps to extract outputs from the relevant step. It can take any value of our choice
        id: publish
        run: echo 'random-number=46' >> $GITHUB.OUTPUT
        # To produce an output, an output must be set giving it an identifyer that can the be linked and...
        # ...listed in the 'outputs' property of the job
        # Command to set an output: echo 'script-file={placeholder}' >> GITHUB_OUTPUTS
        # Alternative syntax soon to be deprecated: echo '::set-output name=script-file::{placeholder}'
        # It saves our value to the specified 'outputs' list member
      # Jobs can produce artifacts (code bundles or in this case the result of the 'npm build' run
      - name: upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: build-output
          path: dist
  deploying:
    needs: building
    runs-on: ubuntu-latest
    steps:
      - name: get artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-output
      - name: check output
        run: ls
      # Outputs produced in other jobs can be retrieved and used in current jobs
      - name: Output random value
        run: echo "${{ needs.building.outputs.random-number }}"
        # We use the special syntax that grants access to environment variables, accessing the relevant...
        # ...job that produced the output we are seeking to reuse
